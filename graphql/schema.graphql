"""
Requires that exactly one field must be supplied and that field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""An ISO 8601-encoded date"""
scalar Date

"""An ISO 8601-encoded datetime"""
scalar DateTime

type Image implements Node {
  """ID of the object."""
  id: ID!
  signedId: String!
  url(size: ImageSize = MD): String!
}

input ImageInput {
  signedId: String!
}

enum ImageSize {
  LG
  MD
  SM
}

type InputFieldError {
  field: String!
  message: String!
}

type Mutation {
  requestUserEmailVerification(
    """Parameters for RequestUserEmailVerification"""
    input: RequestUserEmailVerificationInput!
  ): RequestUserEmailVerificationPayload!
  requestUserPasswordReset(
    """Parameters for RequestUserPasswordReset"""
    input: RequestUserPasswordResetInput!
  ): RequestUserPasswordResetPayload!
  testMutation(
    """Parameters for TestMutation"""
    input: TestMutationInput!
  ): TestMutationPayload!
  updateUserEmail(
    """Parameters for UpdateUserEmail"""
    input: UpdateUserEmailInput!
  ): UpdateUserEmailPayload!
  updateUserProfile(
    """Parameters for UpdateUserProfile"""
    input: UpdateUserProfileInput!
  ): UpdateUserProfilePayload!
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

type Query {
  activityStatus: String
  announcement: String
  bootedAt: DateTime!
  contactEmail: String!
  imageBySignedId(signedId: String!): Image
  passwordStrength(password: String!): Float!
  testEcho(text: String): String!
  user(id: ID!): User
  viewer: User
}

"""Autogenerated input type of RequestUserEmailVerification"""
input RequestUserEmailVerificationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  email: String!
}

"""Autogenerated return type of RequestUserEmailVerification."""
type RequestUserEmailVerificationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""Autogenerated input type of RequestUserPasswordReset"""
input RequestUserPasswordResetInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  email: String!
}

"""Autogenerated return type of RequestUserPasswordReset."""
type RequestUserPasswordResetPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

type Subscription {
  activityStatus: String
  testSubscription: Int!
}

type TestModel {
  birthday: Date
  id: ID!
  name: String!
}

"""Autogenerated input type of TestMutation"""
input TestMutationInput {
  birthday: Date

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  name: String!
}

"""Autogenerated return type of TestMutation."""
type TestMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  model: TestModel
  success: Boolean!
}

"""Autogenerated input type of UpdateUserEmail"""
input UpdateUserEmailInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  currentPassword: String!
  email: String!
}

"""Autogenerated return type of UpdateUserEmail."""
type UpdateUserEmailPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  success: Boolean!
  user: User
}

"""Autogenerated input type of UpdateUserProfile"""
input UpdateUserProfileInput {
  avatar: ImageInput

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  name: String!
}

"""Autogenerated return type of UpdateUserProfile."""
type UpdateUserProfilePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  success: Boolean!
  user: User
}

type User implements Node {
  avatar: Image
  email: String!

  """ID of the object."""
  id: ID!
  isOwner: Boolean!
  name: String!
  unverifiedEmail: String
}